// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Switch-style case expression
 */
@SuppressWarnings("unused")
public final class SimpleCase extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static SimpleCase getRootAsSimpleCase(ByteBuffer _bb) { return getRootAsSimpleCase(_bb, new SimpleCase()); }
  public static SimpleCase getRootAsSimpleCase(ByteBuffer _bb, SimpleCase obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SimpleCase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The expression whose value will be matched
   */
  public org.apache.arrow.computeir.flatbuf.Expression expression() { return expression(new org.apache.arrow.computeir.flatbuf.Expression()); }
  public org.apache.arrow.computeir.flatbuf.Expression expression(org.apache.arrow.computeir.flatbuf.Expression obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Matches for `expression`
   */
  public org.apache.arrow.computeir.flatbuf.CaseFragment matches(int j) { return matches(new org.apache.arrow.computeir.flatbuf.CaseFragment(), j); }
  public org.apache.arrow.computeir.flatbuf.CaseFragment matches(org.apache.arrow.computeir.flatbuf.CaseFragment obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int matchesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.CaseFragment.Vector matchesVector() { return matchesVector(new org.apache.arrow.computeir.flatbuf.CaseFragment.Vector()); }
  public org.apache.arrow.computeir.flatbuf.CaseFragment.Vector matchesVector(org.apache.arrow.computeir.flatbuf.CaseFragment.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The default value if no cases match
   */
  public org.apache.arrow.computeir.flatbuf.Expression else_() { return else_(new org.apache.arrow.computeir.flatbuf.Expression()); }
  public org.apache.arrow.computeir.flatbuf.Expression else_(org.apache.arrow.computeir.flatbuf.Expression obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSimpleCase(FlatBufferBuilder builder,
      int expressionOffset,
      int matchesOffset,
      int else_Offset) {
    builder.startTable(3);
    SimpleCase.addElse_(builder, else_Offset);
    SimpleCase.addMatches(builder, matchesOffset);
    SimpleCase.addExpression(builder, expressionOffset);
    return SimpleCase.endSimpleCase(builder);
  }

  public static void startSimpleCase(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addExpression(FlatBufferBuilder builder, int expressionOffset) { builder.addOffset(0, expressionOffset, 0); }
  public static void addMatches(FlatBufferBuilder builder, int matchesOffset) { builder.addOffset(1, matchesOffset, 0); }
  public static int createMatchesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMatchesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElse_(FlatBufferBuilder builder, int else_Offset) { builder.addOffset(2, else_Offset, 0); }
  public static int endSimpleCase(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // expression
    builder.required(o, 6);  // matches
    builder.required(o, 8);  // else_
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SimpleCase get(int j) { return get(new SimpleCase(), j); }
    public SimpleCase get(SimpleCase obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

