// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class IntervalLiteral extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static IntervalLiteral getRootAsIntervalLiteral(ByteBuffer _bb) { return getRootAsIntervalLiteral(_bb, new IntervalLiteral()); }
  public static IntervalLiteral getRootAsIntervalLiteral(ByteBuffer _bb, IntervalLiteral obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IntervalLiteral __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte valueType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table value(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createIntervalLiteral(FlatBufferBuilder builder,
      byte value_type,
      int valueOffset) {
    builder.startTable(2);
    IntervalLiteral.addValue(builder, valueOffset);
    IntervalLiteral.addValueType(builder, value_type);
    return IntervalLiteral.endIntervalLiteral(builder);
  }

  public static void startIntervalLiteral(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addValueType(FlatBufferBuilder builder, byte valueType) { builder.addByte(0, valueType, 0); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(1, valueOffset, 0); }
  public static int endIntervalLiteral(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // value
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IntervalLiteral get(int j) { return get(new IntervalLiteral(), j); }
    public IntervalLiteral get(IntervalLiteral obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

