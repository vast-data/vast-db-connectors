// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Literal relation
 */
@SuppressWarnings("unused")
public final class LiteralRelation extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static LiteralRelation getRootAsLiteralRelation(ByteBuffer _bb) { return getRootAsLiteralRelation(_bb, new LiteralRelation()); }
  public static LiteralRelation getRootAsLiteralRelation(ByteBuffer _bb, LiteralRelation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LiteralRelation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * An identifiier for the relation. The identifier should be unique over the
   * entire plan. Optional.
   */
  public org.apache.arrow.computeir.flatbuf.RelId id() { return id(new org.apache.arrow.computeir.flatbuf.RelId()); }
  public org.apache.arrow.computeir.flatbuf.RelId id(org.apache.arrow.computeir.flatbuf.RelId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The columns of this literal relation.
   */
  public org.apache.arrow.computeir.flatbuf.LiteralColumn columns(int j) { return columns(new org.apache.arrow.computeir.flatbuf.LiteralColumn(), j); }
  public org.apache.arrow.computeir.flatbuf.LiteralColumn columns(org.apache.arrow.computeir.flatbuf.LiteralColumn obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int columnsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.LiteralColumn.Vector columnsVector() { return columnsVector(new org.apache.arrow.computeir.flatbuf.LiteralColumn.Vector()); }
  public org.apache.arrow.computeir.flatbuf.LiteralColumn.Vector columnsVector(org.apache.arrow.computeir.flatbuf.LiteralColumn.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createLiteralRelation(FlatBufferBuilder builder,
      int idOffset,
      int columnsOffset) {
    builder.startTable(2);
    LiteralRelation.addColumns(builder, columnsOffset);
    LiteralRelation.addId(builder, idOffset);
    return LiteralRelation.endLiteralRelation(builder);
  }

  public static void startLiteralRelation(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addColumns(FlatBufferBuilder builder, int columnsOffset) { builder.addOffset(1, columnsOffset, 0); }
  public static int createColumnsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColumnsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLiteralRelation(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // columns
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LiteralRelation get(int j) { return get(new LiteralRelation(), j); }
    public LiteralRelation get(LiteralRelation obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

