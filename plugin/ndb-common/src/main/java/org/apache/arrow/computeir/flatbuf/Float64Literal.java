// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Float64Literal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Float64Literal getRootAsFloat64Literal(ByteBuffer _bb) { return getRootAsFloat64Literal(_bb, new Float64Literal()); }
  public static Float64Literal getRootAsFloat64Literal(ByteBuffer _bb, Float64Literal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Float64Literal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double value() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createFloat64Literal(FlatBufferBuilder builder,
      double value) {
    builder.startTable(1);
    Float64Literal.addValue(builder, value);
    return Float64Literal.endFloat64Literal(builder);
  }

  public static void startFloat64Literal(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, double value) { builder.addDouble(0, value, 0.0); }
  public static int endFloat64Literal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Float64Literal get(int j) { return get(new Float64Literal(), j); }
    public Float64Literal get(Float64Literal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

