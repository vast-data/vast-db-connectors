// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Access a value for a given map key
 */
@SuppressWarnings("unused")
public final class MapKey extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static MapKey getRootAsMapKey(ByteBuffer _bb) { return getRootAsMapKey(_bb, new MapKey()); }
  public static MapKey getRootAsMapKey(ByteBuffer _bb, MapKey obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MapKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Any expression can be a map key.
   */
  public org.apache.arrow.computeir.flatbuf.Expression key() { return key(new org.apache.arrow.computeir.flatbuf.Expression()); }
  public org.apache.arrow.computeir.flatbuf.Expression key(org.apache.arrow.computeir.flatbuf.Expression obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createMapKey(FlatBufferBuilder builder,
      int keyOffset) {
    builder.startTable(1);
    MapKey.addKey(builder, keyOffset);
    return MapKey.endMapKey(builder);
  }

  public static void startMapKey(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static int endMapKey(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // key
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MapKey get(int j) { return get(new MapKey(), j); }
    public MapKey get(MapKey obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

