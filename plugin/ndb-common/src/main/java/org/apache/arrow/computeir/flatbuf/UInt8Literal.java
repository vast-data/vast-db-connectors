// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UInt8Literal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static UInt8Literal getRootAsUInt8Literal(ByteBuffer _bb) { return getRootAsUInt8Literal(_bb, new UInt8Literal()); }
  public static UInt8Literal getRootAsUInt8Literal(ByteBuffer _bb, UInt8Literal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UInt8Literal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int value() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createUInt8Literal(FlatBufferBuilder builder,
      int value) {
    builder.startTable(1);
    UInt8Literal.addValue(builder, value);
    return UInt8Literal.endUInt8Literal(builder);
  }

  public static void startUInt8Literal(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addByte(0, (byte)value, (byte)0); }
  public static int endUInt8Literal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UInt8Literal get(int j) { return get(new UInt8Literal(), j); }
    public UInt8Literal get(UInt8Literal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

