// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Filter operation
 */
@SuppressWarnings("unused")
public final class Filter extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Filter getRootAsFilter(ByteBuffer _bb) { return getRootAsFilter(_bb, new Filter()); }
  public static Filter getRootAsFilter(ByteBuffer _bb, Filter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Filter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * An identifiier for the relation. The identifier should be unique over the
   * entire plan. Optional.
   */
  public org.apache.arrow.computeir.flatbuf.RelId id() { return id(new org.apache.arrow.computeir.flatbuf.RelId()); }
  public org.apache.arrow.computeir.flatbuf.RelId id(org.apache.arrow.computeir.flatbuf.RelId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Child relation
   */
  public org.apache.arrow.computeir.flatbuf.Relation rel() { return rel(new org.apache.arrow.computeir.flatbuf.Relation()); }
  public org.apache.arrow.computeir.flatbuf.Relation rel(org.apache.arrow.computeir.flatbuf.Relation obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The expression which will be evaluated against input rows
   * to determine whether they should be excluded from the
   * filter relation's output.
   */
  public org.apache.arrow.computeir.flatbuf.Expression predicate() { return predicate(new org.apache.arrow.computeir.flatbuf.Expression()); }
  public org.apache.arrow.computeir.flatbuf.Expression predicate(org.apache.arrow.computeir.flatbuf.Expression obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createFilter(FlatBufferBuilder builder,
      int idOffset,
      int relOffset,
      int predicateOffset) {
    builder.startTable(3);
    Filter.addPredicate(builder, predicateOffset);
    Filter.addRel(builder, relOffset);
    Filter.addId(builder, idOffset);
    return Filter.endFilter(builder);
  }

  public static void startFilter(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addRel(FlatBufferBuilder builder, int relOffset) { builder.addOffset(1, relOffset, 0); }
  public static void addPredicate(FlatBufferBuilder builder, int predicateOffset) { builder.addOffset(2, predicateOffset, 0); }
  public static int endFilter(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // rel
    builder.required(o, 8);  // predicate
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Filter get(int j) { return get(new Filter(), j); }
    public Filter get(Filter obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

