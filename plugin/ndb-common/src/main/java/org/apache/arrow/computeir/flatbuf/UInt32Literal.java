// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UInt32Literal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static UInt32Literal getRootAsUInt32Literal(ByteBuffer _bb) { return getRootAsUInt32Literal(_bb, new UInt32Literal()); }
  public static UInt32Literal getRootAsUInt32Literal(ByteBuffer _bb, UInt32Literal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UInt32Literal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long value() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createUInt32Literal(FlatBufferBuilder builder,
      long value) {
    builder.startTable(1);
    UInt32Literal.addValue(builder, value);
    return UInt32Literal.endUInt32Literal(builder);
  }

  public static void startUInt32Literal(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, long value) { builder.addInt(0, (int)value, (int)0L); }
  public static int endUInt32Literal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UInt32Literal get(int j) { return get(new UInt32Literal(), j); }
    public UInt32Literal get(UInt32Literal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

