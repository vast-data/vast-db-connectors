// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Float32Literal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Float32Literal getRootAsFloat32Literal(ByteBuffer _bb) { return getRootAsFloat32Literal(_bb, new Float32Literal()); }
  public static Float32Literal getRootAsFloat32Literal(ByteBuffer _bb, Float32Literal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Float32Literal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float value() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createFloat32Literal(FlatBufferBuilder builder,
      float value) {
    builder.startTable(1);
    Float32Literal.addValue(builder, value);
    return Float32Literal.endFloat32Literal(builder);
  }

  public static void startFloat32Literal(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, float value) { builder.addFloat(0, value, 0.0f); }
  public static int endFloat32Literal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Float32Literal get(int j) { return get(new Float32Literal(), j); }
    public Float32Literal get(Float32Literal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

