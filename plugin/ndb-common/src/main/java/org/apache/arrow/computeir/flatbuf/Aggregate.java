// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Aggregate operation
 */
@SuppressWarnings("unused")
public final class Aggregate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Aggregate getRootAsAggregate(ByteBuffer _bb) { return getRootAsAggregate(_bb, new Aggregate()); }
  public static Aggregate getRootAsAggregate(ByteBuffer _bb, Aggregate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Aggregate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * An identifiier for the relation. The identifier should be unique over the
   * entire plan. Optional.
   */
  public org.apache.arrow.computeir.flatbuf.RelId id() { return id(new org.apache.arrow.computeir.flatbuf.RelId()); }
  public org.apache.arrow.computeir.flatbuf.RelId id(org.apache.arrow.computeir.flatbuf.RelId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Child relation
   */
  public org.apache.arrow.computeir.flatbuf.Relation rel() { return rel(new org.apache.arrow.computeir.flatbuf.Relation()); }
  public org.apache.arrow.computeir.flatbuf.Relation rel(org.apache.arrow.computeir.flatbuf.Relation obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Expressions which will be evaluated to produce to
   * the rows of the aggregate relation's output.
   */
  public org.apache.arrow.computeir.flatbuf.Expression measures(int j) { return measures(new org.apache.arrow.computeir.flatbuf.Expression(), j); }
  public org.apache.arrow.computeir.flatbuf.Expression measures(org.apache.arrow.computeir.flatbuf.Expression obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int measuresLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.Expression.Vector measuresVector() { return measuresVector(new org.apache.arrow.computeir.flatbuf.Expression.Vector()); }
  public org.apache.arrow.computeir.flatbuf.Expression.Vector measuresVector(org.apache.arrow.computeir.flatbuf.Expression.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Keys by which `aggregations` will be grouped.
   *
   * The nested list here is to support grouping sets
   * eg
   *
   * SELECT a, b, c, sum(d)
   * FROM t
   * GROUP BY
   *   GROUPING SETS (
   *     (a, b, c),
   *     (a, b),
   *     (a),
   *     ()
   *   );
   */
  public org.apache.arrow.computeir.flatbuf.Grouping groupings(int j) { return groupings(new org.apache.arrow.computeir.flatbuf.Grouping(), j); }
  public org.apache.arrow.computeir.flatbuf.Grouping groupings(org.apache.arrow.computeir.flatbuf.Grouping obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int groupingsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.Grouping.Vector groupingsVector() { return groupingsVector(new org.apache.arrow.computeir.flatbuf.Grouping.Vector()); }
  public org.apache.arrow.computeir.flatbuf.Grouping.Vector groupingsVector(org.apache.arrow.computeir.flatbuf.Grouping.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAggregate(FlatBufferBuilder builder,
      int idOffset,
      int relOffset,
      int measuresOffset,
      int groupingsOffset) {
    builder.startTable(4);
    Aggregate.addGroupings(builder, groupingsOffset);
    Aggregate.addMeasures(builder, measuresOffset);
    Aggregate.addRel(builder, relOffset);
    Aggregate.addId(builder, idOffset);
    return Aggregate.endAggregate(builder);
  }

  public static void startAggregate(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addRel(FlatBufferBuilder builder, int relOffset) { builder.addOffset(1, relOffset, 0); }
  public static void addMeasures(FlatBufferBuilder builder, int measuresOffset) { builder.addOffset(2, measuresOffset, 0); }
  public static int createMeasuresVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMeasuresVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGroupings(FlatBufferBuilder builder, int groupingsOffset) { builder.addOffset(3, groupingsOffset, 0); }
  public static int createGroupingsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGroupingsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAggregate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // rel
    builder.required(o, 8);  // measures
    builder.required(o, 10);  // groupings
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Aggregate get(int j) { return get(new Aggregate(), j); }
    public Aggregate get(Aggregate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

