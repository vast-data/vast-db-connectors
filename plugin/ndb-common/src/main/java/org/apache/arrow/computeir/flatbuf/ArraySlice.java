// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Zero-based range of elements in an array
 */
@SuppressWarnings("unused")
public final class ArraySlice extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ArraySlice getRootAsArraySlice(ByteBuffer _bb) { return getRootAsArraySlice(_bb, new ArraySlice()); }
  public static ArraySlice getRootAsArraySlice(ByteBuffer _bb, ArraySlice obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ArraySlice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The start of an array slice, inclusive
   */
  public long startInclusive() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The end of an array slice, exclusive
   */
  public long endExclusive() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createArraySlice(FlatBufferBuilder builder,
      long start_inclusive,
      long end_exclusive) {
    builder.startTable(2);
    ArraySlice.addEndExclusive(builder, end_exclusive);
    ArraySlice.addStartInclusive(builder, start_inclusive);
    return ArraySlice.endArraySlice(builder);
  }

  public static void startArraySlice(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addStartInclusive(FlatBufferBuilder builder, long startInclusive) { builder.addInt(0, (int)startInclusive, (int)0L); }
  public static void addEndExclusive(FlatBufferBuilder builder, long endExclusive) { builder.addInt(1, (int)endExclusive, (int)0L); }
  public static int endArraySlice(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ArraySlice get(int j) { return get(new ArraySlice(), j); }
    public ArraySlice get(ArraySlice obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

