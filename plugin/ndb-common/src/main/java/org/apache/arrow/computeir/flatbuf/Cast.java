// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * A cast expression
 */
@SuppressWarnings("unused")
public final class Cast extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Cast getRootAsCast(ByteBuffer _bb) { return getRootAsCast(_bb, new Cast()); }
  public static Cast getRootAsCast(ByteBuffer _bb, Cast obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Cast __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The expression to cast
   */
  public org.apache.arrow.computeir.flatbuf.Expression operand() { return operand(new org.apache.arrow.computeir.flatbuf.Expression()); }
  public org.apache.arrow.computeir.flatbuf.Expression operand(org.apache.arrow.computeir.flatbuf.Expression obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The type to cast to. This value is a `Field` to allow complete representation
   * of arrow types.
   *
   * `Type` is unable to completely represent complex types like lists and
   * maps.
   */
  public org.apache.arrow.flatbuf.Field to() { return to(new org.apache.arrow.flatbuf.Field()); }
  public org.apache.arrow.flatbuf.Field to(org.apache.arrow.flatbuf.Field obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createCast(FlatBufferBuilder builder,
      int operandOffset,
      int toOffset) {
    builder.startTable(2);
    Cast.addTo(builder, toOffset);
    Cast.addOperand(builder, operandOffset);
    return Cast.endCast(builder);
  }

  public static void startCast(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addOperand(FlatBufferBuilder builder, int operandOffset) { builder.addOffset(0, operandOffset, 0); }
  public static void addTo(FlatBufferBuilder builder, int toOffset) { builder.addOffset(1, toOffset, 0); }
  public static int endCast(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // operand
    builder.required(o, 6);  // to
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Cast get(int j) { return get(new Cast(), j); }
    public Cast get(Cast obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

