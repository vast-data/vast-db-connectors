// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * A set of grouping keys
 */
@SuppressWarnings("unused")
public final class Grouping extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Grouping getRootAsGrouping(ByteBuffer _bb) { return getRootAsGrouping(_bb, new Grouping()); }
  public static Grouping getRootAsGrouping(ByteBuffer _bb, Grouping obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Grouping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Expressions to group by
   */
  public org.apache.arrow.computeir.flatbuf.Expression keys(int j) { return keys(new org.apache.arrow.computeir.flatbuf.Expression(), j); }
  public org.apache.arrow.computeir.flatbuf.Expression keys(org.apache.arrow.computeir.flatbuf.Expression obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int keysLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.Expression.Vector keysVector() { return keysVector(new org.apache.arrow.computeir.flatbuf.Expression.Vector()); }
  public org.apache.arrow.computeir.flatbuf.Expression.Vector keysVector(org.apache.arrow.computeir.flatbuf.Expression.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createGrouping(FlatBufferBuilder builder,
      int keysOffset) {
    builder.startTable(1);
    Grouping.addKeys(builder, keysOffset);
    return Grouping.endGrouping(builder);
  }

  public static void startGrouping(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addKeys(FlatBufferBuilder builder, int keysOffset) { builder.addOffset(0, keysOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGrouping(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // keys
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Grouping get(int j) { return get(new Grouping(), j); }
    public Grouping get(Grouping obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

