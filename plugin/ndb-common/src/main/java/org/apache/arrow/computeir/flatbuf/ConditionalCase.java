// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Conditional case statement expression
 */
@SuppressWarnings("unused")
public final class ConditionalCase extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ConditionalCase getRootAsConditionalCase(ByteBuffer _bb) { return getRootAsConditionalCase(_bb, new ConditionalCase()); }
  public static ConditionalCase getRootAsConditionalCase(ByteBuffer _bb, ConditionalCase obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ConditionalCase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * List of conditions to evaluate
   */
  public org.apache.arrow.computeir.flatbuf.CaseFragment conditions(int j) { return conditions(new org.apache.arrow.computeir.flatbuf.CaseFragment(), j); }
  public org.apache.arrow.computeir.flatbuf.CaseFragment conditions(org.apache.arrow.computeir.flatbuf.CaseFragment obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int conditionsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.CaseFragment.Vector conditionsVector() { return conditionsVector(new org.apache.arrow.computeir.flatbuf.CaseFragment.Vector()); }
  public org.apache.arrow.computeir.flatbuf.CaseFragment.Vector conditionsVector(org.apache.arrow.computeir.flatbuf.CaseFragment.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The default value if no cases match. This is typically NULL in SQL
   * implementations.
   *
   * Defaulting to NULL is a frontend choice, so producers must specify NULL
   * if that's their desired behavior.
   */
  public org.apache.arrow.computeir.flatbuf.Expression else_() { return else_(new org.apache.arrow.computeir.flatbuf.Expression()); }
  public org.apache.arrow.computeir.flatbuf.Expression else_(org.apache.arrow.computeir.flatbuf.Expression obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createConditionalCase(FlatBufferBuilder builder,
      int conditionsOffset,
      int else_Offset) {
    builder.startTable(2);
    ConditionalCase.addElse_(builder, else_Offset);
    ConditionalCase.addConditions(builder, conditionsOffset);
    return ConditionalCase.endConditionalCase(builder);
  }

  public static void startConditionalCase(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addConditions(FlatBufferBuilder builder, int conditionsOffset) { builder.addOffset(0, conditionsOffset, 0); }
  public static int createConditionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startConditionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElse_(FlatBufferBuilder builder, int else_Offset) { builder.addOffset(1, else_Offset, 0); }
  public static int endConditionalCase(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // conditions
    builder.required(o, 6);  // else_
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ConditionalCase get(int j) { return get(new ConditionalCase(), j); }
    public ConditionalCase get(ConditionalCase obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

