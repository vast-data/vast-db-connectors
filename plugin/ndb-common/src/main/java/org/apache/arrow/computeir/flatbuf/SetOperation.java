// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * A set operation on two or more relations
 */
@SuppressWarnings("unused")
public final class SetOperation extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static SetOperation getRootAsSetOperation(ByteBuffer _bb) { return getRootAsSetOperation(_bb, new SetOperation()); }
  public static SetOperation getRootAsSetOperation(ByteBuffer _bb, SetOperation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SetOperation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * An identifiier for the relation. The identifier should be unique over the
   * entire plan. Optional.
   */
  public org.apache.arrow.computeir.flatbuf.RelId id() { return id(new org.apache.arrow.computeir.flatbuf.RelId()); }
  public org.apache.arrow.computeir.flatbuf.RelId id(org.apache.arrow.computeir.flatbuf.RelId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Child relations
   */
  public org.apache.arrow.computeir.flatbuf.Relation rels(int j) { return rels(new org.apache.arrow.computeir.flatbuf.Relation(), j); }
  public org.apache.arrow.computeir.flatbuf.Relation rels(org.apache.arrow.computeir.flatbuf.Relation obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int relsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public org.apache.arrow.computeir.flatbuf.Relation.Vector relsVector() { return relsVector(new org.apache.arrow.computeir.flatbuf.Relation.Vector()); }
  public org.apache.arrow.computeir.flatbuf.Relation.Vector relsVector(org.apache.arrow.computeir.flatbuf.Relation.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The kind of set operation
   */
  public int setOp() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createSetOperation(FlatBufferBuilder builder,
      int idOffset,
      int relsOffset,
      int set_op) {
    builder.startTable(3);
    SetOperation.addRels(builder, relsOffset);
    SetOperation.addId(builder, idOffset);
    SetOperation.addSetOp(builder, set_op);
    return SetOperation.endSetOperation(builder);
  }

  public static void startSetOperation(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addRels(FlatBufferBuilder builder, int relsOffset) { builder.addOffset(1, relsOffset, 0); }
  public static int createRelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSetOp(FlatBufferBuilder builder, int setOp) { builder.addByte(2, (byte)setOp, (byte)0); }
  public static int endSetOperation(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // rels
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SetOperation get(int j) { return get(new SetOperation(), j); }
    public SetOperation get(SetOperation obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

