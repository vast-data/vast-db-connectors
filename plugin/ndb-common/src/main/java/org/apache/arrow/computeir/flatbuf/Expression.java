// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Expression types
 *
 * Expressions have a concrete `impl` value, which is a specific operation.
 *
 * This is a workaround for flatbuffers' lack of support for direct use of
 * union types.
 */
@SuppressWarnings("unused")
public final class Expression extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Expression getRootAsExpression(ByteBuffer _bb) { return getRootAsExpression(_bb, new Expression()); }
  public static Expression getRootAsExpression(ByteBuffer _bb, Expression obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Expression __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte implType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table impl(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createExpression(FlatBufferBuilder builder,
      byte impl_type,
      int implOffset) {
    builder.startTable(2);
    Expression.addImpl(builder, implOffset);
    Expression.addImplType(builder, impl_type);
    return Expression.endExpression(builder);
  }

  public static void startExpression(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addImplType(FlatBufferBuilder builder, byte implType) { builder.addByte(0, implType, 0); }
  public static void addImpl(FlatBufferBuilder builder, int implOffset) { builder.addOffset(1, implOffset, 0); }
  public static int endExpression(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // impl
    return o;
  }
  public static void finishExpressionBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedExpressionBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Expression get(int j) { return get(new Expression(), j); }
    public Expression get(Expression obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

