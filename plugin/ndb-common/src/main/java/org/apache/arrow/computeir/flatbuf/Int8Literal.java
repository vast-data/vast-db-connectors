// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.computeir.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Int8Literal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Int8Literal getRootAsInt8Literal(ByteBuffer _bb) { return getRootAsInt8Literal(_bb, new Int8Literal()); }
  public static Int8Literal getRootAsInt8Literal(ByteBuffer _bb, Int8Literal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Int8Literal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte value() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createInt8Literal(FlatBufferBuilder builder,
      byte value) {
    builder.startTable(1);
    Int8Literal.addValue(builder, value);
    return Int8Literal.endInt8Literal(builder);
  }

  public static void startInt8Literal(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, byte value) { builder.addByte(0, value, 0); }
  public static int endInt8Literal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Int8Literal get(int j) { return get(new Int8Literal(), j); }
    public Int8Literal get(Int8Literal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

