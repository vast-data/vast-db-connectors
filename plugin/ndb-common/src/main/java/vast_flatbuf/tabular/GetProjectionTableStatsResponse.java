// automatically generated by the FlatBuffers compiler, do not modify

package vast_flatbuf.tabular;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class GetProjectionTableStatsResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static GetProjectionTableStatsResponse getRootAsGetProjectionTableStatsResponse(ByteBuffer _bb) { return getRootAsGetProjectionTableStatsResponse(_bb, new GetProjectionTableStatsResponse()); }
  public static GetProjectionTableStatsResponse getRootAsGetProjectionTableStatsResponse(ByteBuffer _bb, GetProjectionTableStatsResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GetProjectionTableStatsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long numRows() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long sizeInBytes() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long dirtyBlocksPercentage() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long initialSyncProgress() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createGetProjectionTableStatsResponse(FlatBufferBuilder builder,
      long num_rows,
      long size_in_bytes,
      long dirty_blocks_percentage,
      long initial_sync_progress) {
    builder.startTable(4);
    GetProjectionTableStatsResponse.addInitialSyncProgress(builder, initial_sync_progress);
    GetProjectionTableStatsResponse.addDirtyBlocksPercentage(builder, dirty_blocks_percentage);
    GetProjectionTableStatsResponse.addSizeInBytes(builder, size_in_bytes);
    GetProjectionTableStatsResponse.addNumRows(builder, num_rows);
    return GetProjectionTableStatsResponse.endGetProjectionTableStatsResponse(builder);
  }

  public static void startGetProjectionTableStatsResponse(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addNumRows(FlatBufferBuilder builder, long numRows) { builder.addLong(0, numRows, 0L); }
  public static void addSizeInBytes(FlatBufferBuilder builder, long sizeInBytes) { builder.addLong(1, sizeInBytes, 0L); }
  public static void addDirtyBlocksPercentage(FlatBufferBuilder builder, long dirtyBlocksPercentage) { builder.addLong(2, dirtyBlocksPercentage, 0L); }
  public static void addInitialSyncProgress(FlatBufferBuilder builder, long initialSyncProgress) { builder.addLong(3, initialSyncProgress, 0L); }
  public static int endGetProjectionTableStatsResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishGetProjectionTableStatsResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedGetProjectionTableStatsResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GetProjectionTableStatsResponse get(int j) { return get(new GetProjectionTableStatsResponse(), j); }
    public GetProjectionTableStatsResponse get(GetProjectionTableStatsResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

