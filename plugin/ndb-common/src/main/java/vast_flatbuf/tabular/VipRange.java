// automatically generated by the FlatBuffers compiler, do not modify

package vast_flatbuf.tabular;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class VipRange extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static VipRange getRootAsVipRange(ByteBuffer _bb) { return getRootAsVipRange(_bb, new VipRange()); }
  public static VipRange getRootAsVipRange(ByteBuffer _bb, VipRange obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VipRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String startAddress() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startAddressAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer startAddressInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int addressCount() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }

  public static int createVipRange(FlatBufferBuilder builder,
      int start_addressOffset,
      int address_count) {
    builder.startTable(2);
    VipRange.addStartAddress(builder, start_addressOffset);
    VipRange.addAddressCount(builder, address_count);
    return VipRange.endVipRange(builder);
  }

  public static void startVipRange(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addStartAddress(FlatBufferBuilder builder, int startAddressOffset) { builder.addOffset(0, startAddressOffset, 0); }
  public static void addAddressCount(FlatBufferBuilder builder, int addressCount) { builder.addShort(1, (short)addressCount, (short)0); }
  public static int endVipRange(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VipRange get(int j) { return get(new VipRange(), j); }
    public VipRange get(VipRange obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

