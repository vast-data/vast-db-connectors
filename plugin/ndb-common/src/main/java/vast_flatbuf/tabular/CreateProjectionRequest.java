// automatically generated by the FlatBuffers compiler, do not modify

package vast_flatbuf.tabular;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CreateProjectionRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static CreateProjectionRequest getRootAsCreateProjectionRequest(ByteBuffer _bb) { return getRootAsCreateProjectionRequest(_bb, new CreateProjectionRequest()); }
  public static CreateProjectionRequest getRootAsCreateProjectionRequest(ByteBuffer _bb, CreateProjectionRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CreateProjectionRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public vast_flatbuf.tabular.Column columns(int j) { return columns(new vast_flatbuf.tabular.Column(), j); }
  public vast_flatbuf.tabular.Column columns(vast_flatbuf.tabular.Column obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int columnsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public vast_flatbuf.tabular.Column.Vector columnsVector() { return columnsVector(new vast_flatbuf.tabular.Column.Vector()); }
  public vast_flatbuf.tabular.Column.Vector columnsVector(vast_flatbuf.tabular.Column.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createCreateProjectionRequest(FlatBufferBuilder builder,
      int columnsOffset) {
    builder.startTable(1);
    CreateProjectionRequest.addColumns(builder, columnsOffset);
    return CreateProjectionRequest.endCreateProjectionRequest(builder);
  }

  public static void startCreateProjectionRequest(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addColumns(FlatBufferBuilder builder, int columnsOffset) { builder.addOffset(0, columnsOffset, 0); }
  public static int createColumnsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColumnsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCreateProjectionRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishCreateProjectionRequestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedCreateProjectionRequestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CreateProjectionRequest get(int j) { return get(new CreateProjectionRequest(), j); }
    public CreateProjectionRequest get(CreateProjectionRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

